#!/bin/bash

# Variable
## General
url="http://www.google.com/search?q="
filter="&filter=0"
start="&start="
userAgent="User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0"
version="1.2.2"

## Effects

# tput: This is a command-line utility in Unix-like operating systems (including Linux and macOS) 
#       that allows you to interact with the terminal capabilities database. It is often used to 
#       query and set terminal attributes, such as text color, font style, and cursor positioning.

# bold: This is an argument passed to the tput command. It specifies that we want to retrieve the 
#       control sequence that sets the text to be displayed in bold.

cBold=$(tput bold)
cRedBold=$(tput setaf 1; tput bold)
cNormal=$(tput sgr0)                # No Color, No Bold

# Test Statement
# echo "${cBold} This text is bold.${cNormal}"

# Functions
## Usage
function usage {
    echo -e "Usage:
    \t-h                                               Displays this help message
    \t-w <DICTIONARY|PATH|FILE>                Specify a Dictionary, path or file
    \t-e <EXTENSION>                           Specify comma-separated extensions
    \t-t <TARGET>                                  Specify a DOMAIN or IP address
    \t-p <PAGES>                                      Specify the number of PAGES
    \t-x <EXCLUSIONS>                                EXCLUDES targets in searches
    \t-d <DELAY>                                Delay in seconds between requests
    \t-s                                 Lists subdomains of the specified domain
    \t-c <TEXT>                 Specify revelant content in comma-separated files
    \t-o <FILENAME>                   Export the results to a file (results only)
    "
    echo -e "
    \b\b\b\bExamples:
        StealthSearch -t site.com -e pdf,doc,bak
        StealthSearch -t site.com -e pdf -p 2
        StealthSearch -t www.site.com -e extensionslist.txt
        StealthSearch -t www.site.com -w config.php,admin,/images/
        StealthSearch -t wsite.com -w wp-admin -p 1
        StealthSearch -t site.com -w wordlist.txt
        StealthSearch -t site.com -w login.html -x dev.site.com
        StealthSearch -t site.com -w admin.html -x exclusion_list.txt
        StealthSearch -t site.com -s -p 10 -d 5 -o StealthSearch-subdomains.txt
        StealthSearch -t site.com -c P@ssw0rd!
    "
    exit 0
}
## Checking parameters

# if [[ ${OPTARG} =~ ^- ]]; then: This is an if statement that checks whether the value of the 
# OPTARG variable starts with a hyphen (-). OPTARG is a special variable used with the getopts 
# command to hold the value of the currently parsed option's argument. The `=~` operator is used 
# for regular expression matching. The regular expression `^-` matches a string that starts with 
# a hyphen.

# If the condition is true (meaning the option's argument starts with a hyphen), it means that 
# the parameter is not valid because it's likely a new option and not a proper argument for 
# the previous option.

## Checking Parameters
function parametersCheck() {
    if [[ ${OPTARG} =~ ^- ]];                   # here ; represents the end of if condition.
    then
        showError
    fi
}
## Show Banner
function banner() {
    echo "
    ╔═╗┌┬┐┌─┐┌─┐┬ ┌┬┐┬ ┬╔═╗┌─┐┌─┐┬─┐┌─┐┬ ┬
    ╚═╗ │ ├┤ ├─┤│  │ ├─┤╚═╗├┤ ├─┤├┬┘│  ├─┤
    ╚═╝ ┴ └─┘┴ ┴┴─┘┴ ┴ ┴╚═╝└─┘┴ ┴┴└─└─┘┴ ┴
    "
}

## Show Error
function showError() {
    echo -e "\n${cRedBold}[!]${cNormal} Error, missing or invalid argument.\n"
    usage
}

function notFound() {
    # Checking temporal ban from Google
    checkBan

    if [[ -n "$extension" ]]; 
    then
        echo -e "\nSorry, no results found for ${cBold}${extension}${cNormal}.\n"
    elif [[ -n "$dictionary" ]];
    then
        echo -e "\n Sorry, no results found."
    elif [[ -n "$subdomain" ]];
    then
        echo -e "\nSorry, no results found for ${cBold}${extension}${cNormal}.\n"
    elif [[ -n "$contents" ]];
    then
        echo -e "\n Sorry, no results found."
}

## Show content in files
function showConentInFile() {
    if [[ -n "$contents" ]]; 
    then
        echo -e "Files found containing: ${cBold}${contents}${cNormal}"
    fi
}

## Exit StealthSearch

# 'trap ctrl_c INT' is setting up a handler to execute the ctrl_c function when the 
# script receives the INT signal, which is generated by the user pressing Ctrl+C.
trap ctrl_c INT

function ctrl_c() {
    echo -e "\n${cRedBold}[!]${cNormal} Exiting StealthSearch...\n"
    exit 1
}

## Google Ban Check
function checkBan() {
    checkBanStatus=$(curl -s -H "$userAgent" "${url}site:${target}${filter}${start}${pageNum}")
    if [[ ${checkBanStatus} =~ "The document has moved" ]];
    then
        echo -e "\n${cRedBold}[!]${cNormal} Oops... Looks like Google has temporariliy blocked your IP address.\n"
        exit 1
    fi
}

## URL Decode

# series of sed (stream editor) substitution commands that are used to replace URL-encoded 
# characters with their corresponding regular characters in a text stream

function urlDecode(){
	sed 's/%3F/?/g;s/%3D/=/g;s/%20/ /g;s/%2520/ /g;s/%21/!/g;s/%23/#/g;s/%24/\$/g;s/%25/\&/g;s/%2B/+/g;s/%26/&/g;s/%3A/:/g;s/%2E/./g;s/%2F/\//g;s/%5F/_/g;s/%28/(/g;s/%29/)/g;s/%26/\&/g'
}















# Script Execute

## Options

# The line you provided is a part of a Bash script and is used to process command-line options 
# using the getopts command. The getopts command is used to parse command-line options and their 
# arguments in a script.

# (while getopts :p:x:c:d:w:e:o:t:sh option;): This line starts a while loop that uses the getopts 
# command to parse command-line options. The colon (:) following the getopts command indicates 
# that some of the options require an argument. The letters following the colon are the valid 
# options that the script can handle, each followed by a colon if an argument is expected. 
# The loop iterates over the command-line arguments and processes the options and their arguments.

# option: This is a variable that will hold the current option being processed by getopts.

# -p: This is an option that expects an argument. The argument will be stored in the variable OPTARG

while getopts :p:x:c:d:w:e:o:t:sh option;
do
    case ${option} in
        h)
            banner
            usage
            break
            exit 1
        ;;
        p)
            parametersCheck
            pages=${OPTARG}
        ;;
        x)
            parametersCheck
            exclusions=${OPTARG}
            exclusionsCheck
        ;;
        c)
            parametersCheck
            contents=${OPTARG}
            contentsCheck
        ;;
        d)
            parametersCheck
            delay=${OPTARG}
        ;;
        w)
            parametersCheck
            dictionary=${OPTARG}
            inurlCheck
        ;;
        e)
            parametersCheck
            extension=${OPTARG}
        ;;
        o)
            parametersCheck
            outputFile=${OPTARG}
        ;;
        t)
            parametersCheck
            target=${OPTARG}
        ;;
        s)
            parametersCheck
            subdomain=on
        ;;
        *)
            banner
            showError
        ;;
    esac
done

## Continue
banner

if [[ -n "$target" ]] && [[ -n "$dictionary" ]] && [[ -z "$subdomain" ]] && [[ -z "$extension" ]] && [[ -z "$contents" ]];
then
    dictionaryAttack
    exit 1

elif [[ -n "$target" ]] && [[ -n "$extension" ]] && [[ -z $subdomain ]] && [[ -z $dictionary ]];
then
    extensionAttack
    exit 1

elif [[ -n "$target" ]] && [[ -n "$subdomain" ]] && [[ -z $extension ]] && [[ -z $dictionary ]] && [[ -z "$contents" ]];
then
    subdomainAttack
    exit 1 

elif [[ -n "$target" ]] && [[ -n "$contents" ]] && [[ -z $subdomain ]] && [[ -z $dictionary ]];
    contentsAttack
    exit 1
else
    showError
fi